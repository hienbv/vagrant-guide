# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"
  #config.vm.box_version = "20160314.0.2"
  config.vm.define "vagrant"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.56"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./htdocs", "/vagrant"
  config.vm.synced_folder "./config_apache2", "/config_apache2"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.name = "vagrant"
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
     #vb.cpus = "2"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL    
    sudo apt-get update
    sudo apt-get install -y apache2
    sudo a2enmod rewrite
    # PHP
    sudo apt-get install -y php5 libapache2-mod-php5 php5-mcrypt
    sudo php5enmod mcrypt

    sudo sed -i "s/DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm$/DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm/" /etc/apache2/mods-enabled/dir.conf
 
    # Update the PHP.ini file, enable <? ?> tags and quieten logging.
    sudo sed -i "s/post_max_size = 8M$/post_max_size = 1024M/" /etc/php5/apache2/php.ini
    sudo sed -i "s/upload_max_filesize = 2M$/upload_max_filesize = 1024M/" /etc/php5/apache2/php.ini
    sudo sed -i "s/;date\.timezone =$/date\.timezone = Asia\/Tokyo/" /etc/php5/apache2/php.ini
    sudo sed -i "s/; max_input_vars = 1000$/max_input_vars = 10000/" /etc/php5/apache2/php.ini
    sudo sed -i "s/session\.gc_maxlifetime = 1440$/session\.gc_maxlifetime = 56700/" /etc/php5/apache2/php.ini
    
    # MYSQL
    DBPASSWD=123456
    sudo echo "mysql-server mysql-server/root_password password $DBPASSWD" | sudo debconf-set-selections
    sudo echo "mysql-server mysql-server/root_password_again password $DBPASSWD" | sudo debconf-set-selections
    sudo apt-get install -y mysql-server php5-mysql
    #sudo mysql_install_db
    #sudo mysql_secure_installation
    
    # PHPMYADMIN
    sudo echo "phpmyadmin phpmyadmin/dbconfig-install boolean true" | sudo debconf-set-selections
    sudo echo "phpmyadmin phpmyadmin/app-password-confirm password $DBPASSWD" | sudo debconf-set-selections
    sudo echo "phpmyadmin phpmyadmin/mysql/admin-pass password $DBPASSWD" | sudo debconf-set-selections
    sudo echo "phpmyadmin phpmyadmin/mysql/app-pass password $DBPASSWD" | sudo debconf-set-selections
    sudo echo "phpmyadmin phpmyadmin/reconfigure-webserver multiselect none" | sudo debconf-set-selections
    sudo apt-get install -y phpmyadmin apache2-utils
    echo "Include /etc/phpmyadmin/apache.conf" | sudo tee -a /etc/apache2/apache2.conf
    sudo sed -i "Alias \/phpmyadmin \/usr\/share\/phpmyadmin$/#Alias \/phpmyadmin \/usr\/share\/phpmyadmin/" /etc/phpmyadmin/apache.conf    
 
    if ! [ -L /var/www/html ]; then
        rm -rf /var/www/html
        ln -fs /vagrant /var/www/html
    fi

    if ! [ -L /etc/apache2/sites-available ]; then
        rm -rf /etc/apache2/sites-available
        ln -fs /config_apache2 /etc/apache2/sites-available
    fi
 
    sudo a2ensite web.conf
    sudo service apache2 restart
    
    # GIT
    sudo apt-get install -y git
  SHELL
end